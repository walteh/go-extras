---
description: 
globs: *.go
alwaysApply: false
---

**⚠️ IMPORTANT: Agents should update this rule when coding standards change**

DO NOT HARD CODE STRINGS WHEN BUILDING GENERATORS UNLESS EXPLICIT CONSENT HAS BEEN GIVEN

# testing 
all code should be written in a way that is testable and verifyable 
code can be written before tests, but [go_test.mdc](mdc:root/.cursor/rules/go_test.mdc) should be in the back of our minds

# imports:
always assume that broken imports are because the reference need to be adjusted, not because the thing being referenced doesn't exist
never directly modify go.mod or go.sum files, always use ./gow mod tidy to update them
when imports are broken, check if the package moved within the project structure first

# logging:
always use slog for logging (NOT zerolog, we've standardized on slog)
The `slog.Logger` should be embedded into the `context.Context` at the earliest appropriate point (e.g., in `main` or when a request is received) using `slog.NewContext(parentCtx, logger)`. Subsequently, retrieve it using `slog.FromContext(ctx)` or pass `ctx` directly to `slog` functions like `slog.InfoContext(ctx, ...)`.
all functions that log should have a context.Context as the first argument
context should be created as early as possible in the program and passed around to all functions that need it
individual packages should not define their own logging logic (unless required, like a server needing to control standard out), instead they should use the logger passed to them

# errors:
always use gitlab.com/tozd/go/errors for golang errors
always use errors.Errorf to wrap golang errors, never use errors.Wrap
the wrapped error naming philosophy should always make the error message say what was trying to be done, not what went wrong (i.e. errors.Errorf("reading file: %w", err))
for new errors the name just needs to be the best name for that error

# running go
always use the ./goshim file defined in the root of this project as an alias for 'go'
./goshim is a lightweight wrapper that uses 'go tool goshim' under the hood

# finding type definitions
use go doc to figure out what types you're working with look like 

# building for local testing
if you just want to run it locally for testing purposes, never use 'go build' - always use './goshim run'

# project structure conventions
- pkg/ contains all reusable packages
- cmd/ contains executable commands
- gen/ contains generated code (don't edit manually)
- tools/ contains development tools
- Always respect workspace boundaries defined in go.work

# General Coding Patterns

**Struct-based Configuration:**
- Prefer passing configuration to functions and types using dedicated structs rather than numerous individual parameters. This improves readability and makes future modifications easier.
  Example: `func NewService(ctx context.Context, cfg ServiceConfig) (*Service, error)`

**Constructor Functions:**
- For complex types, provide constructor functions (e.g., `NewMyType(...)`) that initialize the type correctly.
- Ensure these constructors take `context.Context` as their first argument if they perform I/O, logging, or other context-aware operations.

**Generics for Abstraction:**
- When implementing abstractions that can work with multiple underlying types (e.g., different VMM backends), leverage Go generics to provide type safety and flexibility.
  Example: `type Manager[T BackendInterface] struct { ... }` (as seen with `FirecrackerMicroVM[V vmm.VirtualMachine]`)

**Handling Optional/Variant-Specific Features:**
- When implementing features that may not be available in all build variants or configurations:
  - Attempt to use the feature.
  - If the feature is non-critical and unavailable, log a clear warning message (e.g., using `slog.WarnContext`) and allow the operation to proceed gracefully if possible, rather than returning a hard error.
  - Consult existing modules like `github.com/walteh/ec1/pkg/vmm` for examples.

**Private Modules:**
- This project uses private Go modules hosted on `github.com/walteh`. The `./goshim mod tidy` command and existing environment setup should handle fetching these. Be aware of `GOPRIVATE` settings if troubleshooting dependency issues outside the standard workflow.
